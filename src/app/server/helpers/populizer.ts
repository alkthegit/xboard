import { getRandomItem, getRandomNumberString, normalizeLimits } from './array-helper';
import { UserRecord } from '../models/UserRecord';
import { v4 as uuidv4 } from 'uuid';
import { PersonNames } from '../db/seeds/names';
import { LocationsData } from '../db/seeds/location';
import { facesCount } from '../config/constants';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
 */
export interface PopulationSetting {
  populationVolumeMin?: number;
  populationVolumeMax?: number;
  humanPowerBase?: number;
  xFactor?: number;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –ø–æ–ø—É–ª—è—Ü–∏—é (–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –¥–ª—è –ë–î
 *
 * @param min –º–∏–Ω–∏–º—É–º –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - `15` - `20`)
 * @param max –º–∞–∫—Å–∏–º—É–º –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - `35` - `50`)
 * @xFactor üëΩ —á–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∏—Ö –≤ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏. –ó–Ω–∞—á–µ–Ω–∏—è: [5; 95]
 */
export function populateDb(settings?: PopulationSetting): UserRecord[] {
  const {
    populationVolumeMin: populatioMin,
    populationVolumeMax: populatioMax,
    xFactor
  } = normalizePopulationSetting(settings);

  const result: UserRecord[] = [];

  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
  const limits = normalizeLimits(populatioMin, populatioMax);
  const populationSize = limits[0] + Math.trunc((Math.random() * (limits[1] - limits[0] + 1)))

  for (let i = 0; i < populationSize; i++) {
    result.push(produceEntity(settings));
  }

  startGlobalBeat(result, settings);

  return result;
}

/**
 * –ü–æ—Ä–æ–∂–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å—É—â—Å—Ç–≤–æ
 * @xFactor üëΩ —á–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∏—Ö –≤ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏. –ó–Ω–∞—á–µ–Ω–∏—è: [5; 95]
 * @returns
 */
function produceEntity(settings?: PopulationSetting): UserRecord {
  const { xFactor } = settings;

  // –µ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ –∑–µ–º–ª—è–Ω–∏–Ω
  let x = Math.random() * 100 < xFactor;

  const xNum = x ?
    `#${getRandomNumberString(3, 5)}` : '';
  const gender = x ?
    2 : getRandomItem([0, 1]);
  const genderName = gender === 0 ?
    'male' : gender === 1 ?
      'female' : gender === 2 ?
        'x' : 'male';
  const region = x ?
    LocationsData.find(e => e.code === 'milkyway') :
    getRandomItem(LocationsData.filter(l => l.code !== 'milkyway'));
  const location = getRandomItem(region?.cities ?? []);

  let user: UserRecord = {
    id: uuidv4(),
    first_name: x ? `Alien ${xNum}` : getRandomItem(PersonNames[genderName]?.firstName) ?? '????',
    middle_name: x ? 'Suspect' : getRandomItem(PersonNames[genderName]?.middleName) ?? '????',
    last_name: x ? 'X' : getRandomItem(PersonNames[genderName]?.lastName) ?? '????',
    gender,
    status: getRandomItem([0, 1, 2]),
    region_code: region.code,
    location_name: location,
    user_image: Math.trunc((Math.random() * facesCount)),
    updated: Date.now(),
    contact: false,
    alienated: false,
    rate: 0,
  };

  // –∑–∞–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  startUserBeat(user);

  return Object.seal(user);
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Ç–æ–∫ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 *
 * –° —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–∞–∑–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
 */
function startUserBeat(userRecord: UserRecord): number {
  if (window?.setInterval) {
    return window.setInterval(() => {
      // –±—É–¥–µ—Ç –ª–∏ —á—Ç–æ-—Ç–æ –º–µ–Ω—è—Ç—å—Å—è
      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä—è–Ω—é—Ç –∏–Ω–µ—Ä—Ü–∏—é - —Å–∫—Ä–µ–µ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
      const toChange = Math.random() * 100 > 70;
      if (toChange) {
        // –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å
        userRecord.status = getRandomItem(
          [0, 1, 2].filter(e => e != userRecord.status)
        );
      }
    }, nextBeat())
  }

  return undefined;
}

let globalBeatHandler = 0;
let humanAlienationBeatHandlers: number[] = [];
/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å  –∂–∏–∑–Ω–∏.
 *
 * –ù–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ—á–Ω–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ—Ö –ª—é–¥–µ–π
 *
 * –ò—Å—Ö–æ–¥–Ω–æ –ª—é–¥–∏ –º–æ–≥—É—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é 30 –ø—Ä–æ—Ç–∏–≤ 70,
 * –Ω–æ —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö —Å–Ω–∏–∂–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —á—É–∂–∏—Ö
 * –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
 */
function startGlobalBeat(population: UserRecord[], settings?: PopulationSetting): void {
  settings = normalizePopulationSetting(settings);

  // –±–∞–∑–æ–≤–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–∫–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è –∞—Ç–∞–∫–µ
  const humanPowerBase = settings?.humanPowerBase;
  // –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –Ω–∞ –∑–∞—Ö–≤–∞—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞ - —É–≤–µ–ª–∏—á–∏—ã–≤–µ—Ç—Å—è —Å —Ä–æ—Å—Ç–æ–º —á–∏—Å–ª–∞ —É–∂–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö
  const xPowerBase = 10 - humanPowerBase;

  if (!(population?.length > 0)) {
    return;
  }

  // –æ—á–∏—Å—Ç–∫–∞
  window?.clearTimeout(globalBeatHandler);
  if (humanAlienationBeatHandlers?.length > 0) {
    humanAlienationBeatHandlers.forEach(h => window?.clearTimeout(h));
    humanAlienationBeatHandlers.length = 0;
  }

  // –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏
  const globalAlienationBeat = () => nextBeat(2000, 3000);
  // –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –Ω–∞ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
  const humanAlienationBeat = () => nextBeat(1500, 2500);

  // —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞—Ä–∞–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞
  const alienate = beat => {
    globalBeatHandler = window?.setTimeout(() => {
      // –∫—Ç–æ –ø–æ–¥–≤–µ—Ä–≥—Å—è –∞—Ç–∞–∫–µ
      const humansUnderAttack: UserRecord[] = [];
      const humans = [...population.filter(r => r.gender !== 2)];
      const aliens = [...population.filter(r => r.gender === 2)];

      // –∞—Ç–∞–∫–µ –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è –æ—Ç 1 –¥–æ 5 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –µ—â–µ –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
      let targetCount = Math.trunc(
        Math.ceil(0.01 * humans.length) * Math.random() +
        Math.ceil(0.05 * humans.length) + 1
      );

      // –¥–ª—è –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      targetCount = Math.min(targetCount, humans.length);

      humansUnderAttack.length = 0;
      for (let i = 1; i <= targetCount; i++) {
        humansUnderAttack.push(
          humans.splice(
            Math.trunc(Math.random() * humans.length), 1
          )[0]
        );
      }

      for (let human of humansUnderAttack) {
        // –∞—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å !
        human.contact = true;

        // –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è –∞—Ç–∞–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω.
        // –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –ª–∏–±–æ –∑–∞—Ö–≤–∞—á–µ–Ω, –ª–∏–±–æ –æ—Ç–±–∏–ª—Å—è
        humanAlienationBeatHandlers.push(
          window?.setTimeout(() => {
            const xPopulationRate = Math.max(0,
              (aliens.length / population.length) - 5 / 100
            );

            /**
             * –∏—Ç–æ–≥–æ–≤—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –∞—Ç–∞–∫–∞ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
             *  - —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∞—Ç–∞–∫—É—é—â–∏—Ö –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏:
             *   - –ø—Ä–∏ 5% —à–∞–Ω—Å—ã –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
             *   - –ø—Ä–∏ 95% - —à–∞–Ω—Å—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö (–Ω–æ –Ω–µ –¥–æ 100%)
             *  - —Ä–µ–π—Ç —á–µ–ª–æ–≤–µ–∫–∞ - —Å–∫–æ–ª—å–∫–æ –∞—Ç–∞–∫ –µ–º—É —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∂–∏—Ç—å —Ä–∞–Ω–µ–µ
            */

            // —Ç–µ–∫—É—â–∞—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ–º–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ - –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 9
            const humanPowerTotal = Math.min(humanPowerBase + human.rate, 9);
            // —Å–∏–ª–∞ –∞—Ç–∞–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –∑–∞—â–∏—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞
            const xPowerRelated = 10 - humanPowerTotal;
            const xPowerTotal = xPowerRelated + xPopulationRate * (9 - xPowerRelated);

            const theFate = Math.random();
            if (theFate < xPowerTotal / 10) {
              human.alienated = true;
              human.gender = 2;
            } else {
              // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–π—Ç —á–µ–ª–æ–≤–µ–∫–∞, –Ω–æ –Ω–µ –±–æ–ª–µ–µ, —á–µ–º –¥–æ 4
              human.rate = Math.min(3,
                (human.rate ?? 0) + 1
              );
            }

            // –∞—Ç–∞–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
            human.contact = false;
          }, humanAlienationBeat())
        )
      }

      alienate(globalAlienationBeat());
    }, beat)
  };

  alienate(globalAlienationBeat());
}

/**
 * –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∞: [from; to] –º—Å
 */
const nextBeat = (from: number = 600, to: number = 1500) => {
  [from, to] = normalizeLimits(from, to);

  return from + Math.random() * (to - from + 1);
};

/**
 * –ü—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏
 */
function normalizePopulationSetting(settings: PopulationSetting): PopulationSetting {
  let populatioMin;
  let populatioMax;

  if (settings?.populationVolumeMin == null) {
    populatioMin = settings?.populationVolumeMin ?? 15 + Math.ceil(Math.random() * 5);
    populatioMax = populatioMin + Math.ceil(Math.random() * 20);
  } else {
    populatioMin = settings?.populationVolumeMin;
    populatioMax = settings?.populationVolumeMax;
  }

  settings.populationVolumeMin = populatioMin;
  settings.populationVolumeMax = populatioMax;
  settings.xFactor = settings.xFactor ?? 5;
  settings.humanPowerBase = settings.humanPowerBase ?? 3;

  return settings;
}
