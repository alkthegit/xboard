import { Injectable } from '@angular/core';

/**
 * –î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–≥–∞–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –∏ —Ç.–ø.
 */
@Injectable({
  providedIn: 'root'
})
export class UserEnvService {
  /**
   * üëΩ —á–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –∏—Ö –≤ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏. –ó–Ω–∞—á–µ–Ω–∏—è: [5; 95]
   */
  public xFactor: number = 5;

  /**
   * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ UI;
   *
   * —à–∫–∞–ª–∞ 5, 10, ..., 95
   */
  public xFactorRange: number[] = ''.padEnd((95 - 5) / 5, '.')
    .split('.')
    .map((_, i) => 5 + i * 5);

  /**
   * –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏.
   * –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ
   */
  public populationVolumeMin: number = 15;
  public populationVolumeMax: number = 35;

  /**
   * –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ - –∫–∞–∫ –±—ã–≤–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏, –≤ –±–∞–π—Ç–∞—Ö
   */
  public networkSpeed = 1100 * 1024;

  /**
   * –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –ø–æ–ª–∑—É–Ω–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ç—å—é
   */
  public factorSteps: number = 10;
  public factorMin = 0.005;
  public factorMax = 0.02;

  /**
   * –í–µ–ª–∏—á–∏–Ω–∞, –ø–æ–Ω–∏–∂–∞—é—â–∞—è —Å–µ—Ç–µ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å - "–ø–æ–ª–∑—É–Ω–æ–∫" –≤ UI —Å —Ü–µ–ª—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
   * –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–≤–∏–Ω—É–ª–∏ –ø–æ–ª–∑—É–Ω–æ–∫, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞–º–µ–¥–ª–∏–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å.
   *
   * –û—Ç –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∞–ª–µ–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ç–µ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
   */
  private _networkFactor = Math.trunc(this.factorSteps / 2); // –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ø–æ–ª–∞–º
  public get networkFactor(): number {
    return this._networkFactor;
  }
  public set networkFactor(value: number) {
    this._networkFactor = (value ?? 0) === 0 ? 1 : value;
  }

  /**
   * –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ —Å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º, –≤ –±–∞–π—Ç–∞—Ö
   */
  public get networkSpeedThrottled(): number {
    return this.speedValues[this.networkFactor - 1];
  }

  private speedValues: number[] = [];
  constructor() {
    this.setFactorRanges();
  }

  private setFactorRanges(): void {
    // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —à–∞–≥–∞ "–ø–æ–ª–∑—É–Ω–∫–∞"
    let ratio: number = 1;
    for (let i = 0; i < this.factorSteps; i++) {
      ratio = this.factorMin + i * ((this.factorMax - this.factorMin) / (this.factorSteps - 1));
      this.speedValues.push(ratio * this.networkSpeed);
    }

    this.speedValues.reverse();
  }
}
